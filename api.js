require("dotenv").config();
const express = require("express");
const morgan = require("morgan");
const ngrok = require("ngrok");
const twilio = require("twilio");

const accountSid = process.env.TWILIO_ACCOUNT_SID;
const authToken = process.env.TWILIO_AUTH_TOKEN;
const chatServiceSid = process.env.TWILIO_CHAT_SERVICE_SID;

// Generate a grant token for this specific chat service
function TokenGenerator(identity) {
  const AccessToken = twilio.jwt.AccessToken;
  const ChatGrant = AccessToken.ChatGrant;

  const grant = new ChatGrant({
    serviceSid: chatServiceSid,
  });

  const token = new AccessToken(
    accountSid,
    process.env.TWILIO_API_KEY,
    process.env.TWILIO_API_SECRET
  );

  token.addGrant(grant);
  token.identity = identity;

  return token;
}

// Instantiate Express app
const app = express();

// Add Express middleware
app.use(
  express.json(), // JSON body parsing
  express.static("assets"), // Ensure that JS files can be requested by index.html
  morgan("dev") // Application request logging
);

// Return index.html when the browser requests the root route
app.get("/", (req, res) => {
  return res.sendFile(`${__dirname}/index.html`);
});

// Generate a Chat token and return it to the client as a JWT
app.post("/token", (req, res) => {
  const identity = req.body.identity;
  const token = TokenGenerator(identity);

  return res.json({
    identity: identity,
    token: token.toJwt(),
  });
});

// Logs webhook events generated by the Chat service (check code in app.listen to see which events)
app.post("/events", express.urlencoded({ extended: true }), (req, res) => {
  console.table(req.body);
  return res.status(201).end();
});

// Gather PORT from environment if available, if not, set to 3000
const PORT = process.env.PORT || 3000;

// Start the server
app.listen(PORT, async () => {
  // Create an ngrok endpoint and forward it to the same port as the express server
  const url = await ngrok.connect({ addr: PORT });

  // Instantiate a Twilio client
  const client = require("twilio")(accountSid, authToken);

  // Define a minimal list of pre and post webhook events to subscribe to
  const defaultEvents = [
    "onChannelAdded",
    "onChannelUpdated",
    "onChannelDestroyed",
    "onMemberAdd",
    "onMemberAdded",
    "onMemberUpdate",
    "onMemberUpdated",
    "onMemberRemove",
    "onMemberRemoved",
    "onMessageSent",
  ];

  // If a user has declared $CHAT_WEBHOOK_SUBSCRIPTIONS in the .env file, use that;
  // otherwise, subscribe to the default events.
  const subscribedEvents = process.env.CHAT_WEBHOOK_SUBSCRIPTIONS
    ? process.env.CHAT_WEBHOOK_SUBSCRIPTIONS.split(",")
    : defaultEvents;

  // Update the ToyChat service to add the new ngrok URL &
  // specify which events we want to subscribe to.
  await client.chat.services(chatServiceSid).update({
    preWebhookUrl: `${url}/events`,
    postWebhookUrl: `${url}/events`,
    webhookMethod: "POST",
    webhookFilters: subscribedEvents,
  });

  console.log(
    `open your browser and visit http://localhost:${PORT}/ to run the application locally\n`
  );

  console.log(`Webhooks will be sent to ${url}/events`);
});

module.exports = app;
